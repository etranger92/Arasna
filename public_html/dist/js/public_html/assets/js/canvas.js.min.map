{"version":3,"sources":["public_html/assets/js/node_modules/browser-pack/_prelude.js","public_html/assets/js/canvas.js","public_html/assets/js/public_html/assets/js/canvas.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","particleArray","colours","mouse","x","y","Particle","directionX","directionY","size","colour","this","init","console","log","Math","floor","random","push","addEventListener","event","prototype","draw","beginPath","arc","PI","fillStyle","fill","update","animate","requestAnimationFrame","clearRect","setInterval","undefined"],"mappings":"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","file":"canvas.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const canvas = document.getElementById(\"canvas1\");\nconst ctx = canvas.getContext(\"2d\");\nctx.canvas.width = window.innerWidth;\nctx.canvas.height = window.innerHeight;\n\nlet particleArray = [];\nconst colours = [\n    \"rgba(164,69,178,.3)\",\n    \"rgba(255, 255, 255,.3)\",\n    \"rgba(82, 78, 80, .1)\"\n];\nconst maxSize = 10;\nconst minSize = 0;\n// mouse position ///////////////////////////////\nlet mouse = {\n    x: null,\n    y: null\n};\nwindow.addEventListener(\"mousemove\", function (event) {\n    mouse.x = event.x;\n    mouse.y = event.y;\n    //console.log(mouse);\n});\n// create constructor function for particle\nfunction Particle(x, y, directionX, directionY, size, colour) {\n    this.x = x;\n    this.y = y;\n    this.directionX = directionX;\n    this.directionY = directionY;\n    this.size = size;\n    this.colour = colour;\n}\n// add draw method to particle prototype\nParticle.prototype.draw = function () {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n    //ctx.fillRect(this.x, this.y, this.size, this.size);\n    ctx.fillStyle = this.colour;\n    ctx.fill();\n};\n// add update method to particle prototype\nParticle.prototype.update = function () {\n    if (this.x + this.size * 2 > canvas.width || this.x - this.size * 2 < 0) {\n        this.directionX = -this.directionX;\n    }\n    if (this.y + this.size * 2 > canvas.height || this.y - this.size * 2 < 0) {\n        this.directionY = -this.directionY;\n    }\n    this.x += this.directionX;\n    this.y += this.directionY;\n\n    // mouse interactivity\n    let mouseRadius = 50;\n    if (\n        mouse.x - this.x < mouseRadius &&\n        mouse.x - this.x > -mouseRadius &&\n        mouse.y - this.y < mouseRadius &&\n        mouse.y - this.y > -mouseRadius\n    ) {\n        if (this.size < maxSize) {\n            this.size += 3;\n            this.x -= 1.5;\n        }\n    } else if (this.size > minSize) {\n        this.size -= 0.1;\n    }\n    if (this.size < 0) {\n        this.size = 0;\n    }\n    this.draw();\n};\n// create particle array\nfunction init() {\n    particleArray = [];\n    console.log(colours[Math.floor(Math.random() * colours.length)]);\n    for (let i = 0; i < 1000; i++) {\n        let size = 0;\n        let x = Math.random() * (innerWidth - size * 2 - size * 2) + size * 2;\n        let y = Math.random() * (innerHeight - size * 2 - size * 2) + size * 2;\n        let directionX = Math.random() * 0.2 - 0.1;\n        let directionY = Math.random() * 0.2 - 0.1;\n        let colour = colours[Math.floor(Math.random() * colours.length)];\n        particleArray.push(\n            new Particle(x, y, directionX, directionY, size, colour)\n        );\n    }\n}\n// animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n    ctx.clearRect(0, 0, innerWidth, innerHeight);\n\n    for (let i = 0; i < particleArray.length; i++) {\n        particleArray[i].update();\n    }\n}\ninit();\nanimate();\n\n// BUG FIXES:\n\n// 1) RESIZE SETTING - empty and refill particle array every time window changes size + change canvas size\nwindow.addEventListener(\"resize\", function () {\n    canvas.width = innerWidth;\n    canvas.height = innerHeight;\n    init();\n});\n\n// 2) SET MOUSE POSITION AS UNDEFINED EVERY 1 SEC(to prevent effect getting stuck in corners when mouse leaves window)//////\nsetInterval(function () {\n    // NULL WONT WORK AS IF IT COERCE INTO POSITION 0 and draw all particle in the corner\n    mouse.x = undefined;\n    mouse.y = undefined;\n}, 1000);","const canvas = document.getElementById(\"canvas1\");\nconst ctx = canvas.getContext(\"2d\");\nctx.canvas.width = window.innerWidth;\nctx.canvas.height = window.innerHeight;\n\nlet particleArray = [];\nconst colours = [\n    \"rgba(164,69,178,.3)\",\n    \"rgba(255, 255, 255,.3)\",\n    \"rgba(82, 78, 80, .1)\"\n];\nconst maxSize = 10;\nconst minSize = 0;\n// mouse position ///////////////////////////////\nlet mouse = {\n    x: null,\n    y: null\n};\nwindow.addEventListener(\"mousemove\", function (event) {\n    mouse.x = event.x;\n    mouse.y = event.y;\n    //console.log(mouse);\n});\n// create constructor function for particle\nfunction Particle(x, y, directionX, directionY, size, colour) {\n    this.x = x;\n    this.y = y;\n    this.directionX = directionX;\n    this.directionY = directionY;\n    this.size = size;\n    this.colour = colour;\n}\n// add draw method to particle prototype\nParticle.prototype.draw = function () {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n    //ctx.fillRect(this.x, this.y, this.size, this.size);\n    ctx.fillStyle = this.colour;\n    ctx.fill();\n};\n// add update method to particle prototype\nParticle.prototype.update = function () {\n    if (this.x + this.size * 2 > canvas.width || this.x - this.size * 2 < 0) {\n        this.directionX = -this.directionX;\n    }\n    if (this.y + this.size * 2 > canvas.height || this.y - this.size * 2 < 0) {\n        this.directionY = -this.directionY;\n    }\n    this.x += this.directionX;\n    this.y += this.directionY;\n\n    // mouse interactivity\n    let mouseRadius = 50;\n    if (\n        mouse.x - this.x < mouseRadius &&\n        mouse.x - this.x > -mouseRadius &&\n        mouse.y - this.y < mouseRadius &&\n        mouse.y - this.y > -mouseRadius\n    ) {\n        if (this.size < maxSize) {\n            this.size += 3;\n            this.x -= 1.5;\n        }\n    } else if (this.size > minSize) {\n        this.size -= 0.1;\n    }\n    if (this.size < 0) {\n        this.size = 0;\n    }\n    this.draw();\n};\n// create particle array\nfunction init() {\n    particleArray = [];\n    console.log(colours[Math.floor(Math.random() * colours.length)]);\n    for (let i = 0; i < 1000; i++) {\n        let size = 0;\n        let x = Math.random() * (innerWidth - size * 2 - size * 2) + size * 2;\n        let y = Math.random() * (innerHeight - size * 2 - size * 2) + size * 2;\n        let directionX = Math.random() * 0.2 - 0.1;\n        let directionY = Math.random() * 0.2 - 0.1;\n        let colour = colours[Math.floor(Math.random() * colours.length)];\n        particleArray.push(\n            new Particle(x, y, directionX, directionY, size, colour)\n        );\n    }\n}\n// animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n    ctx.clearRect(0, 0, innerWidth, innerHeight);\n\n    for (let i = 0; i < particleArray.length; i++) {\n        particleArray[i].update();\n    }\n}\ninit();\nanimate();\n\n// BUG FIXES:\n\n// 1) RESIZE SETTING - empty and refill particle array every time window changes size + change canvas size\nwindow.addEventListener(\"resize\", function () {\n    canvas.width = innerWidth;\n    canvas.height = innerHeight;\n    init();\n});\n\n// 2) SET MOUSE POSITION AS UNDEFINED EVERY 1 SEC(to prevent effect getting stuck in corners when mouse leaves window)//////\nsetInterval(function () {\n    // NULL WONT WORK AS IF IT COERCE INTO POSITION 0 and draw all particle in the corner\n    mouse.x = undefined;\n    mouse.y = undefined;\n}, 1000);"]}